웹개발4 1일차
javascript day07

map -> set -> DOM -> 이벤트

0. javascript
1) node.js 설치(운영체제에 맞는 것으로 설치) https://nodejs.org/en
		LTS 버전으로 설치(Window Binary (.zip) 64-bit 설치
		resource 폴더 이동 후 압축해제
		설치 경로는 그대로 진행
	nodejs 폴더 전체를 C:\로 이동시키기

2) 환경변수 설정
	C:\로 이동한 폴더 경로 복사
	속성 - 고급 시스템 설정 - 환경 변수
	[시스템변수]-[새로만들기]
		변수 이름 : NODE_HOME
		변수 값 : C:\nodejs
	[시스템변수]-[Path]
		새로만들기 -> %NODE_HOME% 추가

3) VS CODE
	code runner 확장프로그램 설치

1. 맵(map)
	키가 있는 데이터를 저장할 때 사용한다
	맵은 키로 객체를 허용한다!!
	
	new Map()
	.set(key, value)
	.get(key)
	.has(key)
	.delete(key)
	.clear()
	.size
	.keys()
	.values()
	.entries()

객체를 맵으로 바꾸기
	Object.entries(obj)	객체를 맵으로 바꾸는 메소드
				객체의 키-값 쌍을 요소 [key, value]로 가지는 배열로 반환
	
맵을 객체로 바꾸기	
	Object.fromEntries()	맵을 객체로 바꾸는 메소드
				각 요소가 [키, 값] 쌍인 배열을 객체로 바꿔준다

2. 셋(set)
	중복값을 허용하지 않음
	
	new Set(iterable)	셋을 생성
				이터러블 객체를 전달받으면 그안의 값을 복사해서 셋에 넣어준다
	.add(value)		값을 추가, 셋 자신을 반환
	.delete(value)		값을 제거, 호출시점에 셋 안에 값이 있어서 제거에 성공하면 true, 아니면 false
	.has(value)		셋 안에 값이 존재하면 true, 아니면 false를 반환
	.clear()		셋을 비우는 메소드
	.size			셋의 개수를 카운팅
	
반복 작업을 위한 메소드
	.keys()		셋 내의 모든 값을 포함하는 이터러블 객체를 반환
	.values()	맵과의 호환성을 위해 만들어진 메소드
	.entries()	셋 내의 각 값을 이용해서 만든 [value, value] 배열을 포함하는 이터러블 객체를 반환함
			맵과의 호환성을 위해 만들어졌다


3. DOM
1) DOM API
	문서의 객체 모델을 의미(Document Object Model)
	div, spane, input과 같은 요소들을 모두 DOM 이라고 한다
	HTML 태그들을 하나씩 객체화 한 것을 의미한다
	HTML 페이지 내용과 모양을 제어하기 위해 사용되는 객체이다
	HTML 태그당 DOM 객체가 하나씩 생성된다
	HTML 태그의 포함관계에 따라서 부모, 자식, 형제자매 관계로 구성된다

  	API(Apliction Programing Interface)
	응용프로그램 사이에서 동선에 사용되는 언어와 메세지를 의미한다
	API를 자원별로 구분하는 것을 REST API라고 한다

2) DOM selector 종류
	- document.getElementById()		//단일 객체 반환,  HttpCollection
	- document.getElementsByClassName() 	//HttpCollection
	- document.getElementsByTagName()	//HttpCollection

	- document.getElementByName()		//유사 배열 객체 반환, NodeList
	- document.querySelector()		// NodeList
	- document.querySelectorAll()		// NodeList

	NodeList와 HttpCollection
	HttpCollection : live		//실시간 변화를 감시
	NodeList : noneLive		//실시간 변화를 감시하지 않는다






































