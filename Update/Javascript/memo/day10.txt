웹개발4 4일차
javascript 10일차

복습 -> 문서로딩 이벤트 -> 동기/비동기 -> jquery

0. 복습
1) 팝업창과 모달창
- 팝업창
	현재 페이지에서 새로운 브라우저 창을 열어주는 것

- 모달창
	실제 브라우저 창이 아니라 새로운 레이어를 띄어준다는 차이점이 있다

2) 노드로 가져오기
- 자식노드로 가져오기
	요소.childNodes
	요소.firstChild
	요소.lastChild

- 부모노드 가져오기
	요소.parentNode

- 형제노드 가져오기
	요소.nextSibling
	요소.previousSibling

3) 이벤트 리스너
	addEventListener
	하나의 요소에 여러개의 이벤트 핸들러를 등록할 수 있다
	ex) addEventListener("이벤트", 콜백함수, options)
		//option()

4) 자주 사용되는 이벤트
	click		요소를 클릭했을 때
	moseleave	요소에서 마우스가 떠났을 때
	mousedown	요소를 누르고 마우스를 아직 떼기 이전 상태
	mouseup		요소를 누르고 마우스를 땐 상태
	mousemove	마우스가 움직일 때마다
	mousewheal	마우스 휠이 이동되었을 때
	scroll		스크롤의 변화가 있을 때
	focus		활성화 되어있을 때
	blur		포커스에서 벗어났을 때
	keypress	키를 누른 순간
	keyup		키를 누르고 있다가 땐 순간
	keydown		키를 누르고 떼기 이전인 순간
	change		폼 필드의 속성이 변경되었을 때

attribute	(속성)
	setAttribute("속성명", 속성값)	- 설정
	getAttribute("속성명", 속성값)	- 조회
	removeAttribute("속성명", 속성값)	- 삭제

class 추가, 제거
	.classList.add('클래스명')
	.classList.remove('클래스명')

1. 문서로딩 이벤트
window 객체
	document 객체의 부모이다
	window 객체는 브라우저 창을 의미하며 브라우저를 다루는 여러 기능을 가지고 있다

load 이벤트
	window 객체에 load 이벤트를 걸어주면 문서의 로딩이 완전히 끝났을 때 이벤트가 발생한다
	다른 객체들과 동일하게 이벤트 핸들러를 연결하면 된다

	window.onload = () => {};
	window.addEventListener('load', () => {});

scroll 이벤트
	스크롤을 이용해 화면에 위치를 변경하면 발생한다
	브라우저에 관한 이벤트이므로 window 객체에 이벤트 핸들러를 연결한다

2. 쓰레드
1) 동기화(synchronized)
	동기와 비동기의 흐름을 알기 위해서 쓰레드 개념을 먼저 알아야한다
	프로그램과 프로세스를 이해해야한다

2) 프로그램(program)
	실행되지 않은 상태이다
	사이트 접속 -> 다운로드 -> 설치 -> 아무것도 안하면 실행되지 않는다(더블클릭해야 실행)

3) 프로세스(process)
	메모리에 올라가서 동작하는 실행된 프로그램

4) 쓰레드(thread)
	비동기식 방식으로 특정 연산을 수행할 때 업무를 효율적으로 처리하기 위해
	짧은 시간안에 다양한 연산들을 마치 동시에 처리하는 것처럼 할 수 있게 하는 것
	
	단일쓰레드
		처리 경로를 한 개만 가지고 있기 때문에 직렬적이다
		동시에 많은 양을 처리하기 힘들기 때문에 상대적으로 비효율적이다
		하지만 하나의 작업에 문제가 발생하더라도 다른 작업에는 영향을 끼치지 않는다
		따라서 안정성이 보정되고 설계 시 멀티 쓰레드에 비해 쉽다

	장점	하나가 다 처리되지 않았을 때 다음이 실행되지 않아 안정성이 뛰어나다

	멀티쓰레드
		하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서 차례로 처리한다
		여러개의 처리 경로를 가질 수 있도록 하며, 동시 작업이 가능해진다
		설계하기 굉장히 어렵고, 하나의 쓰레드 문제 발생 시 모든 쓰레드에 문제가 발생하게 된다
		멀티쓰레드로 설계했다면 처리량 증가, 효율성 증가, 처리 비용 감소의 장점이 있기 때문에
		단점을 감수하고 설계한다(대표적으로 JAVA 언어가 해당된다)

자바스크립트의 쓰레드
	자바스크립트는 단일 쓰레드
	자바스크립트는 이벤트 루프를 활용하여 테스크가 종료되지 않아도 곧바로 실행하는 함수 처리하는 방식을 도입
	동기는 코드를 순차적인 흐름이지만
	비동기 처리시간이 각각 다르기 때문에 결과를 예상할 수 없다
	따라서 결과에 따라 다음 비동기 이후 실행된 동기적 함수를 실행시키기 위하여 비동기를 동기적으로 처리한다

3. 동기와 비동기
	동기(Synchronous)
		요청을 보낸 후 다음 응답을 받아야만 다음 동작이 이루어지는 방식을 의미한다
		모든 일은 순차적으로 실행되며 어떤 작업이 수행중이라면 다음 작업은 대기하게 된다


	비동기(Asynchronous)
		데이터를 수신하는 코드와 페이지를 표시하는 결과 비동기적으로 처리하는 방식을 의미한다
		들어오는 일을 모두 우선적으로 받아주고 끝났다는 이벤트가 전달되면 해당 이벤트를 처리한다
		자바스크립트에서는 기존에 콜백함수를 이용했지만 콜백지옥에 빠질 수 있는 가능성이 높기 때문에
		(가독성떨어지고 실수위험이 커지기 때문에) ES7이상에서는 promise를 ES8에서는 async와 await를 지원한다


프로미스(promise)
	자바 스크립트 비동기 처리에 사용되는 객체이다
	프로미스는 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용한다

async/await
	async 함수는 함수 선언 앞에 async 키워드를 붙여서 정의한다
	항상 프로미스를 반환한다
	async 함수 내에서 await 키워드를 사용하여 다른 프로미스나 기본값을 기다릴 수 있다

	await 키워드는 async 함수 내에서만 사용할 수 있다
	프로미스가 처리될 때까지 해당 함수의 실행이 일시중지된다
	프로미스가 이행되면 해당 값을 반환한다
	await 표현식은 프로미스를 반환하는 모든 비동기 작업에 사용될 수 있다

fetch 
	자바스크립트에서 제공하는 비동기 네트워크 통신을 위한 기능이다
	HTTP 요청을 보내고 응답을 받아올 때 사용된다
	웹 어플리케이션에서 서버와 데이터를 주고받을 때 많이 사용된다

	fetch는 URL를 매개변수로 사용하여 요청을 보내고 프로미스를 반환한다
	네트워크요청 : HTTP 요청 메소드(get, post, put, delete 등) 요청 헤더, 본문 등을 설정할 수 있다
	프로미스 기반 : .then(), .catch()를 사용하여 응답을 처리할 수 있다	


4. Json 무료 가상 Rest API 서버 : JSONPlaceholder
	테스트 및 프로토 타이핑을 위한 무료 가상 API를 제공하는 사이트
	6가지의 데이터 API 주소를 호출해서 데이터를 JSON으로 받아 볼 수 있다
	/posts		100개
	/commets	500개
	/albums		100개
	/photos		5000개
	/todos		200개
	/users		100개

	https://jsonplaceholder.typicode.com/users











































	

