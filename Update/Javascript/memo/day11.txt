웹개발4 5일차
js 11일차

복습 -> jQuery

0. 복습
1) 쓰레드
프로그램
   실행되지 않은 상태

프로세스
   메모리에 올라가서 동작하는 실행된 프로그램

쓰레드
   비동기식 방식으로 특정 연산을 수행할 때 업무를 효율적으로 처리하기 위해
   짧은 시간안에 다양한 연산들을 동시에 처리하는 것처럼 할 수 있게 하는 것
   쿨타임, 유튜브를 보고있을 때, 무한스크롤 등등

   - 단일 쓰레드
      처리 경로를 한 개만 가지고 있기 때문에 직렬적이다
      동시에 많은 양을 처리하기 힘들기 때문에 상대적으로 비효율적이다
      하나의 작업에 문제가 발생하더라도 다른 작업에는 영향을 끼치지 않는다
      따라서 안정성이 보장되고 설계시 멀티 쓰레드에 비해 쉽다

   ** 중요
      쓰레드는 무조건 단일로 시작한다. 그 이후로 처리 경로를 나눠서 실행한다.

   - 멀티 쓰레드
      하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은
      단위로 분할해서 차례대로 처리된다
      여러개의 처리 경로를 가질 수 있도록 하며, 동시 작업이 가능해진다
      설계하기 굉장히 어려우며, 하나의 쓰레드 문제 발생시 모든 쓰레드에
      문제가 발생하게 된다
      멀티쓰레드로 설계했다면 처리량 증가, 효율성 증가, 처리비용 감소 장점이
      있기 단점을 감수하고 설계한다
   
   ** 중요
      동시에 실행되는것처럼 보이지만, 순차적으로 실행한다
      절대 동시에가 아니라 빠른 속도로 순차적으로 진행된다
      속도가 빠른것이 아닌 효율이 좋아진 것
      
   ex) 작업시간 A = 1시간, B = 5분, C = 10분
   단일쓰레드    1시간 15분 =>   1시간 후 결과물 1개 
   멀티쓰레드    1시간 15분 =>    15분 후 결과물 2개

자바스크립트의 쓰레드(코드를 처리할 수 있는 일꾼이 하나)
   자바스크립트는 단일 쓰레드
   따라서 이벤트 루프를 활용하여 테스크가 종료되지 않아도 곧바로 실행하는 함수
   처리하는 방식을 도입
   why? 만약 사이트에 데이터를 가져온다고 가정했을 때 가져오는 시간이 한시간이
   걸린다면 단일쓰레드인 자바스크립트는 작업이 완료되는 한시간동안 다음 코드를
   실행할 수 없으므로 사용자는 빈 화면을 보게 된다

2) 동기, 비동기
동기는 코드를 순차적인 흐름이다
    하지만 비동기 처리시간이 각각 다르기 때문에 결과를 예상할 수 없다
    따라서 결과에 따라 다음 비동기 이후 실행된 동기적 함수를 실행시키기 위해서
    비동기를 동기적으로 처리한다

동기, 비동기
    동기와 비동기는 다르다(흐흠이 다르다)
    비동기 안에서도 동기의 흐름이 있다
    비동기는 비동기만의 흐름이 따로 있다
    동기를 비동기, 비동기를 동기로 바꿔야 합류가 된다

1. JQuery
   자바스크립트 라이브러리이다
   웹이 발달하기 전 브라우저별로 각각 다른 스크립트언어를 사용하여 웹 개발자들이
   브라우저별로 코드를 작성해야했다
   불편함을 해결하기 위해 JQuery가 나왔지만 현재는 표준화된 자바스크립트를 사용
   하므로 JQuery의 필요성이 많이 떨어졌다
   JQuery는 자바스크립트 DOM, Ajax 등을 사용할 때 길고 복잡한 코드의 양을
   줄어주어 편의성을 높여준다

2. jquery 사용하기
   jquery 검색 > download > 스크롤 내리면 CDN > url 접속
   > 가장 최근 버전 uncompressed > 복사해서 html에 붙여넣고 사용
   https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js

   <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

3. JQuery 문법
기본 선택자
   $('선택자')   
   jquery는 기본적으로 선택자를 이용하여 요소를 가져온다
   css선택자와 동일하게 작성하면된다(#, . 등등)
   jquery로 요소를 가져오면 자바스크립트 객체가 아니라 jquery 객체 타입이다
   즉, jquery에서 제공하는 여러 기능을 사용할 수 있게 된다
   jquery로 요소를 가져와 변수에 저장할 경우 자바스크립트의 객체인지 jquery의
   객체인지 구분하기 힘들기 때문에 jquery 객체를 저장하는 변수는
   이름 앞에 $를 붙여준다

기타 선택자
   jQuery 에서는 기본 선택자를 도와주는 여러 기타 선택자를 메소드 형태로 제공한다
   기본 선택자 뒤에 .을 사용하고 작성한다

   $('선택자').기타선택자()

   parent()   바로 위의 부모요소를 선택한다
   parents()   상위 요소를 모두 선택한다(조상)
   children()   자식 요소를 모두 선택한다
   prev()      이전 형제 요소를 선택한다(형)
   prevAll()   이전 형제요소 전체를 선택한다(형들)
   next()      다음 형제 요소를 선택한다(동생)
   nextAll()   다음 형제요소 전체를 선택한다(동생들)
   closet('선택자')   부모부터 조상까지 모두 탐색하여 해당 선택자와 일치하는
         요소를 가져온다
   find('선택자')   자식부터 자손까지 모두 탐색하여 해당 선택자와 일치하는
         요소를 가져온다

기본선택자로 여러 요소를 선택했을 때 사용하는 기타선택자
   first()      여러 요소 중 첫번째를 선택한다
   last()      여러 요소 중 마지막을 선택한다
   eq(index)   여러 요소중 index번호를 사용하여 선택한다


요소를 조작하는 메소드
   html(), html('수정내용')   innerHTML 처럼 요소 내부의 HTML을 가져오거나 수정할 수 있다
   text(), text('수정내용')   innerText 처럼 요소 내부의 text를 가져오거나 수정할 수 있다
   css('속성'), css('속성','값')   해당 요소의 스타일 속성을 가져오거나 수정할 수 있다
   attr('속성'), attr('속성', '값')   해당 요소의 속성을 가져오거나 수정할 수 있다
   removeAttr('속성')   해당 요소의 속성을 삭제한다
   addClass('클래스명')   해당 요소에 특정 클래스를 추가한다
   removeClass('클래스명')   해당 요소에 특정 클래스를 삭제한다
   toggleClass('클래스명')   해당 요소에 특정 클래스가 존재하면 삭제시키고, 클래스가 존재하지 않으면 추가시킨다
   hasClass('클래스명')   해당 요소가 특정 클래스를 가지고 있다면 true, 없다면 false를 반환
   prop('프로퍼티명')      해당 요소의 프로퍼티를 가져오거나 수정함(jquery를 이용하여 자바스크립트 객체의 프로퍼티를
            수정할 때 자주 사용)
   val(), val('값')      해당 요소의 value값을 가져오거나 수정할 수 있다

이벤트 등록 메소드
    모든 이벤트는 이벤트 이름과 동일한 메소드가 존재한다
    click(), focus()
    click( () => {})

    on()을 사용할 수도 있음
    on('이벤트명', () => {})